%% Concatenation replace addition
function lgraph = setNetworkMaxpooling(imsize, nr_Layers, nr_FirstFilters)
% Input layer
inputLayer = imageInputLayer(imsize,'Name','input', 'Normalization','zscore');

% Initialize the layer array with the input layer
layers = [inputLayer];

% Contractive path
for i = 1:nr_Layers
    layers = [layers, ...
        convolution2dLayer(3, nr_FirstFilters, 'Name', sprintf('Conv%d', i), ...
            'Padding', 'same', 'Stride', 1), ...
        batchNormalizationLayer('Name', sprintf('BN%d', i)), ...
        reluLayer('Name', sprintf('relu%d', i)), ...   % Connect this layer 1
        maxPooling2dLayer(2, 'Stride', 2, 'Name', sprintf('MaxPool%d', i))
    ];

    nr_FirstFilters = nr_FirstFilters * 2;  % Doubling the number of filters for each subsequent layer
end

% Bottleneck layers
layers = [layers, ...
    convolution2dLayer(3, nr_FirstFilters, 'Name', 'BottleneckConv1', ...
        'Padding', 'same', 'Stride', 1), ...
    reluLayer('Name', 'BottleneckRelu1'), ...
    convolution2dLayer(3, nr_FirstFilters, 'Name', 'BottleneckConv2', ...
        'Padding', 'same', 'Stride', 1), ...
    reluLayer('Name', 'BottleneckRelu2')
];

% Expansive path
for i = 1:nr_Layers
    nr_FirstFilters = nr_FirstFilters / 2;
    layers = [layers, ...
        transposedConv2dLayer(2, nr_FirstFilters, 'Name', sprintf('TransConv%d', i), ...
            'Stride', 2, 'Cropping', 'same'), ...
        reluLayer('Name', sprintf('relu%d', nr_Layers+i)),...              % Connect this 2
        convolution2dLayer(3, nr_FirstFilters, 'Name', sprintf('ConvUp%d', i), ...
            'Padding', 'same', 'Stride', 1), ...
        reluLayer('Name', sprintf('secondrelu%d', nr_Layers+i)),...
        depthConcatenationLayer(2,'Name', sprintf('concat%d', i)),...
    ];
end

% Final layers and Regression layer for training
layers = [layers, ...
    convolution2dLayer(1, 1, 'Name', 'finalConv1x1'), ...
    reluLayer('Name', 'finalRelu'), ...
    regressionLayer('Name', 'output')
];

% Connecting the contractive path and the expansive path
lgraph = layerGraph(layers);

% Adding skip connections between contracting and expansive paths using concatenation
for i = 1:nr_Layers
    % % Define the connection from the contractive path (skip connection)
    % lgraph = connectLayers(lgraph, sprintf('relu%d', nr_Layers + i - 1), sprintf('concat%d/in1', i));
    % Define the connection from the expansive path
    lgraph = connectLayers(lgraph, sprintf('relu%d', i), sprintf('concat%d/in2', nr_Layers - i + 1));
end

end